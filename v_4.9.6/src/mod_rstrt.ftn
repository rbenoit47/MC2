copyright (C) 2001  MSC-RPN COMM  %%%MC2%%%
      subroutine mod_rstrt (unrstrt,prout,status,caller)
      implicit none
*
      character* (*) caller
      logical prout
      integer unrstrt,status
*
*     ##########################################
*     #  Modification of a limited number of   #
*     #  controle parameters at restart        #
*     ##########################################
*
#include "mc2nml.cdk"
#include "path.cdk"
*
      character*10 nmlname
      integer unnml,pnerrdirf,pnflag1,pnflag2,k,longueur
      data unnml /11/      
*
*---------------------------------------------------------------------
*
      if (caller.eq.'PIL') nk_out=0
*
      do k=1,maxlvl_out
         z_tmp(k) = z_out(k)
         z_out(k) = -999
      end do
      do k=1,npolist
         upolist_tmp(k) = upolist(k)
         upolist(k)     = '-9-9-9-9'
      end do
*
      status  = -1
      nmlname = 'restart'
*
* *** Updating configuration with namelist restart
*
      open (unnml,file=nml,access='SEQUENTIAL',
     $      form='FORMATTED',status='OLD',iostat=pnerrdirf)
      if (pnerrdirf.ne.0) then
         status = 1
         goto 9991
      endif
*
      call checnml (unnml,'&'//nmlname,pnflag1)
      if (pnflag1.eq.0) then
*
#if defined (NEC)
         read (unnml,restart,iostat=pnflag2)
#else
         read (unnml,nml=restart,iostat=pnflag2)
#endif
         if (pnflag2.ne.0) then
            print '(/,2x,a/2x,4a/)', '==> ABORT -- ABORT <==',
     $            'PROBLEM WITH NAMELIST ',nmlname,' ON FILE ',
     $             nml(1:longueur(nml))
            goto 9991
         else
            print *, '   CONFIGURATION UPDATED WITH NAMELIST ',nmlname
         endif
      else
         status = 1
         goto 9991
      endif
*
      close (unnml)
*
      gnnrstrt = min(gnnt,gnnrstrt)
      if (gnnrstrt.lt.1) gnnrstrt = gnnt
      gndstat = max(1,gndstat)
      gnpstat = max(1,gnpstat)
      g_id = min(gni+hx,max(1-hx,g_id))
      g_if = min(gni+hx,max(1-hx,g_if))
      g_jd = min(gnj+hy,max(1-hy,g_jd))
      g_jf = min(gnj+hy,max(1-hy,g_jf))
*
*     Print controle parameters
*
      if (prout) then
         if (caller.eq."PIL") then
            print '(4x,a/16x,a)', 
     $           'WARNING --  POSSIBLE RESTART MODIFICATION',
     $           'FOR VARIABLE: gnnrstrt,npilf'
         else if (caller.eq."MC2") then
            print '(4x,a/16x,a/16x,a)', 
     $      'WARNING --  POSSIBLE RESTART MODIFICATION',
     $      'FOR VARIABLE: gnnrstrt,gndstat,gnpstat,gnnls,gnstatdp,',
     $      'diagres,g_id,g_if,g_jd,g_jf,z_out'
         else if (caller.eq."PHY") then
            print '(4x,a/16x,a)', 
     $      'WARNING --  POSSIBLE RESTART MODIFICATION',
     $      'FOR VARIABLE: upolist'
         endif
      endif
*
      status = 1
 9991 continue  
*    
      if (z_out(1).eq.-999) then
         do k=1,nk_out
            z_out(k)=z_tmp(k)
         end do
      else
         if (z_out(1).lt.0) then
            do k=1,nk
               z_out(k)=k
            end do
            nk_out=nk
         else
         nk_out=0
         do k=1,maxlvl_out
            if ((z_out(k).le.nk).and.(z_out(k).gt.0)) then
               nk_out=nk_out+1
               z_tmp(nk_out) = z_out(k)
            endif
         end do
         do k=1,nk_out
            z_out(k) = z_tmp(k)
         end do
         endif
      endif
*
      if (upolist(1).eq.'-9-9-9-9') then
         do k=1,npolist
            upolist(k) = upolist_tmp(k)
         end do
      endif
*
#if defined (NEC) || defined (HPPA)
      call flush (6)
#endif
*
*---------------------------------------------------------------------
*
      return
      end















