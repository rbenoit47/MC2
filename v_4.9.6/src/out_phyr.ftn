copyright (C) 2001  MSC-RPN COMM  %%%MC2%%%
***s/r out_phyr
*
      subroutine out_phyr ( outbus,fni,fnj,doni,donj,ni,nj,stepno )
      implicit none
*
      integer fni,fnj,doni,donj,ni,nj,stepno
      real outbus (*)
*
*AUTHOR     Michel Desgagne                Dec   2002
*
*REVISION
*
*OBJECT
*    Gather the index of physics variables to write on disk 
*    for the current timestep.
*
*FILES
*
*ARGUMENTS
*    NAMES     I/O  TYPE  A/S        DESCRIPTION
*
*   outbus      I    R    A    physics output bus (complete)
*   sizeobus    I    I    S    dimension of outbus
*   fni         I    I    S    folded dimension along X
*   fnj         I    I    S    folded dimension along Y
*   doni        I    I    S    computational hor. dimension along X
*   donj        I    I    S    computational hor. dimension along Y
*   ni          I    I    S    regular dimension along X
*   nj          I    I    S    regular dimension along Y
*   stepno      I    I    S    step number
*
**
#include "lesbus.cdk"
#include "partopo.cdk"
*
      character*8 wrponm(phyotop)
      integer ngth,gthid(phyotop),i,j,k,id,im,npar,nnk,
     $        offw1,offbo,wrpospc
      parameter (npar = 3)
      integer wrpopar(npar,phyotop)
      real, dimension (:), allocatable :: w1
*----------------------------------------------------------------------
*
      ngth = 0
      do 10 i=1,phyotop
         if ((stepno.eq.0).and.(phyopar(i,5).le.0)) then
            ngth = ngth + 1
            gthid(ngth) = i
            goto 10
         endif
         if (phyopar(i,5).le.0) goto 10
         if (mod(stepno,phyopar(i,5)).eq.0) then
            ngth = ngth + 1
            gthid(ngth) = i
            goto 10
         endif
 10   continue
*
      if (ngth.gt.0) then
*
         if (myproc.eq.0) then
            print'(/a,i4,a)', ' WRITING THE FOLLOWING ',ngth,
     $                        ' PHYSICS VARIABLE(S) ON DISK:'
            print*, (phyonm(gthid(i),2),i=1,ngth)
         endif
*
         wrpospc = 0
         do id=1,ngth
            wrponm (id)   = phyonm(gthid(id),2)
            wrpopar(1,id) = wrpospc + 1
            wrpopar(2,id) = phyopar(gthid(id),3)
            wrpopar(3,id) = phyopar(gthid(id),4)
            wrpospc       = wrpopar(1,id) +
     $           ni*nj*phyopar(gthid(id),3)*phyopar(gthid(id),4) - 1
         end do
*
         allocate (w1(wrpospc))
         w1 (:) = 0.
*
         do id=1,ngth
            nnk = phyopar(gthid(id),3)
            do im=1,phyopar(gthid(id),4)
               offw1=wrpopar(1,id)       + (im-1)*ni  * nj  * nnk
               offbo=phyopar(gthid(id),1)+ (im-1)*fni * fnj * nnk
               do k =1,nnk
               do j =1,donj
               do i =1,doni
                  w1    (offw1 + (nnk-k)*ni *nj  + (j-1)*ni   +i-1) =
     $                 outbus(offbo +   (k-1)*fni*fnj + (j-1)*doni +i-1)
               end do
               end do
               end do
            end do
         end do
*
         call out_wrphyo ( w1, wrpospc, wrponm, wrpopar, ngth, stepno )
         deallocate (w1)
*
      endif
*
*----------------------------------------------------------------------
      return
      end


