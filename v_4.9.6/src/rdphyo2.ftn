copyright (C) 2001  MSC-RPN COMM  %%%MC2%%%
***s/r rdphyo2
*
      subroutine rdphyo2 (n,npar,ng,stepno,iun,oun)
      implicit none
*
      integer n,npar,ng,stepno,iun,oun
*
*AUTHOR     Michel Desgagne                Nov   1995
*
*REVISION
*
*ARGUMENTS
*    NAMES     I/O  TYPE  A/S        DESCRIPTION
*
*    n          I    I    S    number of output variables on outbus
*    npar       I    I    A    number of attributes per variable
*    stepno     I    I    S    step number
*    iun        I    I    S    fortran unit (input  file)
*    oun        I    I    S    fortran unit (output file)
*
*IMPLICIT
*
#include "rec.cdk"
#include "sor.cdk"
#include "vinterpo.cdk"
#include "yomdyn1.cdk"
#include "lcldim.cdk"
#include "levels.cdk"
*
**
      integer maxnvar
      parameter (maxnvar=1000)
      character*8 nm(maxnvar),varname,pcpnm(4),dianm(4),mixnm(3),dum
      integer ip2,i,j,k,id,im,ier,offset,ip1,ip3,nl,gnip3_
      integer cnt,sizobus,nfld3d,nkmap
      integer onelvl(3),nklvl(3),par(npar,n),nkk,glphys,i2d,i3d
      integer, dimension (:), allocatable ::  ktop,kbot
      real intlev(nkout)
      real, dimension (:), allocatable :: 
     $                     lvls,t1,prt,pniv,htr,outbus
      real, dimension (:,:), allocatable :: hh0
*
      data pcpnm /'PR','SN','RT','SR'/
      data dianm /'UU','VV','TT','HU'/
      data mixnm /'IF','QI','QW'/
      data onelvl /1,1,1/
*----------------------------------------------------------------------
*
      if (n.gt.maxnvar) then
         write (6,101) n,maxnvar
         stop
      endif
*
      read (iun) nk,sizobus
*
      allocate (hh0(ng,2),prt(ng*nk),lvls(nk),outbus(sizobus))
*
      read (iun) ( lvls(i),i=1,nk )
*
      call rdpbus (outbus,prt,hh0,nm,par,n,npar,sizobus,gni,gnj,nk,iun)
*
      if (stepno.lt.gnstep1) goto 9876
      ip2 = int (dble(stepno) * float(gnlst) / 3600. + 1.e-12)
      print '(/" PROG ",i3,"HR",10x,"TIME STEP NO: ",i5)',ip2,stepno
*
      nklvl(1) = 1
      nklvl(2) = 1
      nklvl(3) = 1
      call ecris2_fst (hh0,0.,'ME',0,ip2,0,1.0,ng,1,nklvl)
*
      nfld3d=0
      do id=1,n
         if (par(2,id).gt.1) nfld3d = nfld3d +1
      end do
*
      nl = 0
*
      if (nfld3d.gt.0) then
*
         if (levtyp.ne.'G') then
            call lev_out (intlev,nl,pres_o,prt,height_o,ng,nk,nkout)
            nkk = nl
         else
            nl  = 0
            nkk = nk
         endif
         call adjtblo (table_out,nkk,nvardyn)
         if (levtyp.ne.'G') then
            allocate ( pniv(ng*nl),htr(ng*nk),ktop(ng*nk),kbot(ng*nk),
     $                 t1(ng*nl) )
            call hpalloc ( paposit,ng*max(1,nl)*2 ,ier,1)
            call hpalloc ( pahww  ,ng*(nk+3)      ,ier,1)
            cnt = 0
            do k=1,nl
               do i=1,ng
                  cnt = cnt + 1
                  pniv (cnt) = intlev(k)
               end do
            end do
            call hauteur (htr,ztr,hh0,htop,iscal,ng,1,nk)
            if (levtyp.eq.'P') then
               call inv_posiz (posit,hww,prt,pniv,ktop,kbot,ng,nl,nk)
            elseif (levtyp.eq.'H') then
               call posiz3 (posit,hww,htr,pniv,ktop,kbot,ng,nl,nk)
            endif
            deallocate (pniv,htr,ktop,kbot)
         endif
      endif
      print *, '------------------------------------------------'
*
      gnip3_ = gnip3
*
      do 10 id=1,n
      do 20 im=1,par(3,id)
         ip3 = im
         ip1 = 0 
         if (par(3,id).gt.1) call convip (ip1,real(im),3,1,dum,.false.)
         offset = par(1,id) + (im-1)*ng*par(2,id)
         varname = nm(id)
         if (par(2,id).lt.2) then
            varname = nm(id)
            if (nm(id).eq.'RAIN'  ) varname = pcpnm(im)
            if (nm(id).eq.'SFCDIA') varname = dianm(im)
            if ((nm(id).eq.'RAIN').or.(nm(id).eq.'SFCDIA')) ip1 = 0
            call ecris2_fst (outbus(offset),0.,varname,ip1,ip2,ip3,
     $                                           1.0,ng,1,onelvl)
         else
            if (par(3,id).gt.1) gnip3 = 0
            if (nm(id).eq.'ICEDIA') then
               varname = mixnm(im)
               gnip3 = gnip3_
            endif
            glphys = -1
            do i=1,nvardyn
               if (udolist(i).eq.varname) glphys=i
            end do
            if (glphys.gt.0) then
               nklvl(1) = table_out(1,glphys)
               nklvl(2) = table_out(2,glphys)
               nklvl(3) = table_out(3,glphys)
            else
               nklvl(1) = 1
               nklvl(2) = nkk
               nklvl(3) = 1
            endif
            print*, varname,(nklvl(i),i=1,3)
            if (levtyp.ne.'G') then
               call inv_vertint (t1,outbus(offset),posit,hww,ng,nl,nk)
               call ecris2_fst (t1,intlev,varname,-1,ip2,ip3,1.0,
     $                                             ng,nl,nklvl)
            else
               call ecris2_fst (outbus(offset),lvls,varname,-1,ip2,ip3,
     $                                                1.0,ng,nk,nklvl)
            endif
         endif
 20   continue
      gnip3 = gnip3_
 10   continue
*
 9876 continue
*
      deallocate (hh0,prt,lvls,outbus)
      if ((nfld3d.gt.0).and.(levtyp.ne.'G')) then  
         deallocate (t1)
         call hpdeallc (paposit,ier,1)
         call hpdeallc (pahww  ,ier,1)
      endif
*
 101  format (/1x,' N=',i4,' > MAXNVAR=',i4,' in rdphyo2 - ABORT'/)
 990  format ( ' ------------------------------------------------'/
     $         ' MINIMUM PRESSURE FOUND:',f10.2,' Pa'/
     $         ' VERTICAL INTERPOLATION WILL BE PERFORMED'/
     $         ' ON THE FOLLOWING PRESSURE LEVELS:')
 991  format ( '             WARNING'/
     $         'THESE LEVELS WILL NOT BE PRODUCED'/
     $         '       (OVER THE MODEL LID)')
*----------------------------------------------------------------------
      return
      end
