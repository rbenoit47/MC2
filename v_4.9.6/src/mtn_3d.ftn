copyright (C) 2001 MSC-RPN COMM %%%MC2%%%
***s/r mtn_3d
*
      subroutine mtn_3d
      implicit none
*
**
#include "nesting.cdk"
#include "dynmem.cdk"
#include "tracers.cdk"
#include "nestpnt.cdk"
#include "yomdyn.cdk"
#include "yomdyn1.cdk"
#include "dynpar.cdk"
#include "consdyn_8.cdk"
#include "levels.cdk"
#include "partopo.cdk"
#include "mtn.cdk"
#include "topo.cdk"
#include "refer.cdk"
#include "h_geop.cdk"
*    
      integer i,j,k,n,gnix,gnjy,dim,kc,kp1,km1
      real up1(gni+2*hx,gnj+2*hy,  gnk),hhw(minx:maxx,miny:maxy,  gnk),
     $     hht(minx:maxx,miny:maxy,gnk),hhm(minx:maxx,miny:maxy,0:gnk)
      real s,d
      pointer (pas1 ,s(*)), (pad1 ,d(*))
      real*8 p00,one,dh,dqdz,pt5,a00,a01,beta
*
      one  = 1.0d0
      pt5  = 0.5d0
      gnix = gni+2*hx
      gnjy = gnj+2*hy
*
* define the initial conditions for the winds
*
      if (myproc.eq.0) then
         do k=1,gnk
         do j=1,gnjy
         do i=1,gnix
            up1(i,j,k) = 0.
         end do
         end do
         end do
      endif
*
      call glbdist2 (up1,vp  ,minx,maxx,miny,maxy,gni+hx,gnj+hy,gnk)

      if (myproc.eq.0) then  
         do k=1,gnk
         do j=1,gnjy
         do i=1,gnix
            up1(i,j,k) = mtn_flo
         end do
         end do
         end do
      endif
*
      call glbdist2 (up1,up  ,minx,maxx,miny,maxy,gni+hx,gnj+hy,gnk)
*
* define the initial conditions for temperature and pressure
*
      if (theocase.eq.'MTN_PINTY1'.or.theocase.eq.'MTN_PINTY2') then
*
*  pinty cases
* 
         do k=1,gnk
         do j=1-hy,ldnj+hy
         do i=1-hx,ldni+hx
            tpp(i,j,k)=0.0
         end do
         end do
         end do
*
         do k=0,gnk
         do j=1-hy,ldnj+hy
         do i=1-hx,ldni+hx
            qpp(i,j,k)=0.0
         end do
         end do
         end do
*
      else if (theocase.eq.'MTN_SHAER') then
*
*  shaer case
*
         tzero1 = 288.15
         nstar1 = 1.e-2
         p00    = 100000.0d0
         a00    = nstar1**2/grav_8
         a01    = grav_8/(cpd_8*tzero1)/a00
*
         do j=1-hy,ldnj+hy
         do i=1-hx,ldni+hx
            hhm(i,j,0)=hh0i(i,j,1)
         end do
         end do
*
         do k=1,gnk
            do j=1-hy,ldnj+hy
            do i=1-hx,ldni+hx
               hhw(i,j,k)=h_geop(zt(k),i,j)
               hhm(i,j,k)=h_geop(zm(k),i,j)
               hht(i,j,k)=h_geop(ztr(k),i,j)
            end do
            end do
         end do
*
         call qntstar(qstr,nssq,gots,orts,hht,hhm,
     $                 (maxx-minx+1)*(maxy-miny+1),0,gnk)
*
         do k=0,gnk
            do j=1-hy,ldnj+hy
            do i=1-hx,ldni+hx
               qpp(i,j,k) = dlog(p00) + cpd_8/rgasd_8*
     $                   dlog((one-a01)+a01*exp(-a00*hhm(i,j,k)))
               qpp(i,j,k) = (qpp(i,j,k) - qstr(i,j,k))/orts(i,j,k)
            end do
            end do
         end do
*
         do k=1,gnk
            km1=max(k-1,1)
            kp1=min(k+1,gnk)
            do j=1-hy,ldnj+hy
            do i=1-hx,ldni+hx
               beta = nssq(i,j,k)/grav_8-gots(i,j,k)/cpd_8
               dh=(hhw(i,j,kp1)-hhw(i,j,km1))*pt5
               dqdz=(qpp(i,j,k)-qpp(i,j,k-1))/dh
     $             -(qpp(i,j,k)+qpp(i,j,k-1))*pt5*beta
               tpp(i,j,k) = grav_8*dqdz/(grav_8-dqdz)
            end do
            end do
         end do
*
      endif
*
* Initialize Moisture and Vertical motion to zero
*
      do k=1,gnk
         do j=1-hy,ldnj+hy
         do i=1-hx,ldni+hx
            hmp(i,j,k) = 0.
            swp(i,j,k) = 0.
         end do
         end do
      end do
*
      if ((glconta).and.(iconta.ne.0)) then
         do k=1,gnk
            do j=1-hy,ldnj+hy
            do i=1-hx,ldni+hx
               clp(i,j,k,iconta)     = 0.
               clnestt(i,j,k,iconta) = 1.
            end do
            end do
         end do
         call nesajr 
     $            (clp(1-hx,1-hy,1,iconta),clnestt(1-hx,1-hy,1,iconta),
     $                    minx,maxx,miny,maxy,gnk,1,1,hblen_x,hblen_y)
      endif

c---- A Buble is introduced as a tracer
      if (myproc.eq.0) then  
         kc=0
         do k=1,gnk-1
            if (zm(k).lt.blb_zp) kc=k
         enddo
         print *,"kc=",kc," : ",zm(kc)
         do k=1,gnk
         do j=1,gnjy
         do i=1,gnix
c           up1(i,j,k)=100./(1.+
c    $           (real(k-kc)/real(blb_zs))**4.+
c    $           (real(i-gnix/4)/real(blb_xs))**4.)
c            up1(i,j,k)= min(5,max(5-abs(i-gnix/4),0))
             up1(i,j,k)= 1.
         end do
         end do
         end do
      endif
      call glbdist2 (up1,clp ,minx,maxx,miny,maxy,gni+hx,gnj+hy,gnk)
c---- 
*
      if (ctebcs) then
         do k=1,gnk
         do j=1-hy,ldnj+hy
         do i=1-hx,ldni+hx
             unesta(i,j,k) =  up(i,j,k)
             vnesta(i,j,k) =  vp(i,j,k)
            swnesta(i,j,k) = swp(i,j,k)
            tpnesta(i,j,k) = tpp(i,j,k)
            qpnesta(i,j,k) = qpp(i,j,k)
            hmnesta(i,j,k) = hmp(i,j,k)
         end do
         end do
         do n=1,ntr
            do j=1-hy,ldnj+hy
            do i=1-hx,ldni+hx
               clnesta(i,j,k,n) = clp(i,j,k,n)
            end do
            end do
         end do
         end do
         do j=1-hy,ldnj+hy
         do i=1-hx,ldni+hx
            qpnesta(i,j,0) = qpp(i,j,0)
         end do
         end do
      endif
*
      dim = ndynvar*dim3d+dim2d
      pas1 = paqpp
      pad1 = paqp0
      do i=1,dim
         d(i) = s(i)
      end do
*     
      do k=1,gnk
         do j=1-hy,ldnj+hy
            do i=1-hx,ldni+hx
               unestt(i,j,k) =  up(i,j,k)
               vnestt(i,j,k) =  vp(i,j,k)
               swnestt(i,j,k) = swp(i,j,k)
               tpnestt(i,j,k) = tpp(i,j,k)
               qpnestt(i,j,k) = qpp(i,j,k)
               hmnestt(i,j,k) = hmp(i,j,k)
            end do
         end do
      end do
      do n = 1, ntr
         do k=1,gnk
            do j=1-hy,ldnj+hy
               do i=1-hx,ldni+hx
                  clnestt(i,j,k,n) = clp(i,j,k,n)
               end do
            end do
         end do
      end do
      do j=1-hy,ldnj+hy
      do i=1-hx,ldni+hx
         qpnestt(i,j,0) = qpp(i,j,0)
      end do
      end do
*     
      if (myproc.eq.0) then
         write (6,602)
      endif
*
*
 602  format (/'INITIALIZATION OF MOUNTAIN PROBLEM COMPLETED')
*---------------------------------------------------------------------
      return
      end




