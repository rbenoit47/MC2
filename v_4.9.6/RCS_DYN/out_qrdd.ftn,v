head	4.9;
access;
symbols;
locks; strict;
comment	@# @;


4.9
date	2003.06.09.13.08.55;	author armnmod;	state Exp;
branches;
next	;


desc
@@


4.9
log
@mc2_4.9
@
text
@copyright (C) 2001  MSC-RPN COMM  %%%MC2%%%
***s/r out_qrdd -- Compute vorticity and divergence
*
      subroutine out_qrdd (qr,dd,uv,msf,lminx,lmaxx,lminy,lmaxy,lnk)
      implicit none
*
      integer lminx,lmaxx,lminy,lmaxy,lnk
      real qr(lminx:lmaxx,lminy:lmaxy,lnk),
     $     dd(lminx:lmaxx,lminy:lmaxy,lnk),
     $     uv(lminx:lmaxx,lminy:lmaxy,lnk,2),
     $    msf(lminx:lmaxx,lminy:lmaxy)
*
*OBJECT
*     This subroutine computes relative vorticity (qr)
*     and the divergence (dd).
*
*METHOD
*
**
#include "lcldim.cdk"
#include "yomdyn1.cdk"
#
      integer i,j,k,i0,in,j0,jn,err
      real w1(minx:maxx,miny:maxy,lnk,4),c1,c2

*----------------------------------------------------------------------
      c1 = 0.5
      c2 = 1.0 / grdx
*
      i0 = 1    - hx*west
      j0 = 1    - hy*south
      in = ldni + hx*east
      jn = ldnj + hy*north
*
*   * Computing vorticity
*
      do k=1,lnk
         do j=j0,jn
         do i=i0-1*(1-west),in-1*east           
            w1(i+1,j,k,1) = c1*(uv(i+1,j,k,2)+uv(i,j,k,2))
         end do
         end do
         do j=j0-1*(1-south),jn-1*north
         do i=i0,in
            w1(i,j+1,k,2) = c1*(uv(i,j+1,k,1)+uv(i,j,k,1))
         end do
         end do
      end do
*
      call rpn_comm_xch_halo (w1,minx,maxx,miny,maxy,ldni,ldnj,2*lnk,
     $                               hx,hy,period_x,period_y,ldni,0)
*
      do k=1,lnk
         do j=j0,jn
         do i=i0+1*west,in-1*east          
            w1(i,j,k,3) = c2*(w1(i+1,j,k,1)-w1(i,j,k,1))
         end do
         end do
         do j=j0+1*south,jn-1*north
         do i=i0,in
            w1(i,j,k,4) = c2*(w1(i,j+1,k,2)-w1(i,j,k,2))
         end do
         end do
      end do
*
      call rpn_comm_xch_halo(w1(minx,miny,1,3),minx,maxx,miny,maxy,ldni,
     $                        ldnj,2*lnk,hx,hy,period_x,period_y,ldni,0)
*
      do k=1,lnk
         do j=j0,jn-1*north
         do i=i0+1*west,in-1*east         
            w1(i,j,k,1) = c1*(w1(i,j+1,k,3)+w1(i,j,k,3))
         end do
         end do
         do j=j0+1*south,jn-1*north
         do i=i0,in-1*east
            w1(i,j,k,2) = c1*(w1(i+1,j,k,4)+w1(i,j,k,4))
         end do
         end do
         do j=j0+1*south,jn-1*north
         do i=i0+1*west ,in-1*east 
            qr(i,j,k) = msf(i,j) * (w1(i,j,k,1)-w1(i,j,k,2))
         end do
         end do
      end do
      if (.not.period_x) then
         if (west.gt.0) then
            do k=1,lnk
            do j=j0+1*south,jn-1*north
               qr(i0,j,k) = 2.*qr(i0+1,j,k) - qr(i0+2,j,k)
            end do
            end do
         endif
         if (east.gt.0) then
            do k=1,lnk
            do j=j0+1*south,jn-1*north
               qr(in,j,k) = 2.*qr(in-1,j,k) - qr(in-2,j,k)
            end do
            end do
         endif
      endif
      if (.not.period_y) then
         if (south.gt.0) then
            do k=1,lnk
            do i=i0,in
               qr(i,j0,k) = 2.*qr(i,j0+1,k) - qr(i,j0+2,k)
            end do
            end do
         endif
         if (north.gt.0) then
            do k=1,lnk
            do i=i0,in
               qr(i,jn,k) = 2.*qr(i,jn-1,k) - qr(i,jn-2,k)
            end do
            end do
         endif
      endif
*
*   * Computing divergence
*
      do k=1,lnk
         do j=j0,jn
         do i=i0,in-1*east         
            w1(i,j,k,1) = c2*(uv(i+1,j,k,1)-uv(i,j,k,1))
         end do
         end do
         do j=j0,jn-1*north
         do i=i0,in
            w1(i,j,k,2) = c2*(uv(i,j+1,k,2)-uv(i,j,k,2))
         end do
         end do
         do j=j0,jn-1*north 
         do i=i0,in-1*east 
            dd(i,j,k) = msf(i,j) * (w1(i,j,k,1)+w1(i,j,k,2))
         end do
         end do
      end do
      if (.not.period_x) then
         if (east.gt.0) then
            do k=1,lnk
            do j=j0,jn-1*north 
               dd(in,j,k) = 2.*dd(in-1,j,k) - dd(in-2,j,k)
            end do
            end do
         endif
      endif
      if (.not.period_y) then
         if (north.gt.0) then
            do k=1,lnk
            do i=i0,in
               dd(i,jn,k) = 2.*dd(i,jn-1,k) - dd(i,jn-2,k)
            end do
            end do
         endif
      endif
*
*----------------------------------------------------------------------
      return
      end
@
