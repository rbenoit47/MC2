head	4.9;
access;
symbols;
locks; strict;
comment	@# @;


4.9
date	2003.06.09.13.08.55;	author armnmod;	state Exp;
branches;
next	;


desc
@@


4.9
log
@mc2_4.9
@
text
@copyright (C) 2001  MSC-RPN COMM  %%%MC2%%%
***s/r nes1s -- Horizontal nesting on 1 face
*
      subroutine nes1s (fn,fd,lminx,lmaxx,lminy,lmaxy,lnk,
     $                                  is,js,ndavx,ndavy)
      implicit none
*
      integer lminx,lmaxx,lminy,lmaxy,lnk,is,js,ndavx,ndavy
      real fn(lminx:lmaxx,lminy:lmaxy,lnk),
     $     fd(lminx:lmaxx,lminy:lmaxy,lnk)
*
*AUTHOR
*
*REVISION
*
*LANGUAGE   Fortran 77
*
*OBJECT (nesajr)
*     This subroutine blends the field "fn", updated by a dynamic
*     timestep, with the nesting field "fd". Nesting is performed
*     according to equation (4.1.1) on ndavx+1 points along the x-axis 
*     and on ndavy+1 points along the y-axis. The attenuation function
*     "p" is as described by equations 4.1.2, 4.1.3 abd 4.1.4.
*
*FILES
*
*ARGUMENTS
*    NAMES     I/O  TYPE  A/S        DESCRIPTION
*
*    fn         O     R    A    field to be nested
*    fd         I     R    A    nesting field
*    nis        I     I    S    horizontal dimension
*    njs        I     I    S    horizontal dimension
*    nks        I     I    S    vertical   dimension
*    ni         I     I    S    horizontal computational domain
*    nj         I     I    S    horizontal computational domain
*    nk         I     I    S    vertical   computational domain
*    is         I     I    S    staggering parameter along x
*    js         I     I    S    staggering parameter along y
*    ks         I     I    S    staggering parameter along z
*    ndavx      I     I    S    thichness of sponge layer along x
*    ndavy      I     I    S    thichness of sponge layer along y
*
*IMPLICIT
#include "lcldim.cdk"
#include "nestpnt.cdk"
*
*MODULES
*
**
      integer i,j,k,nit,njt,il,ih,jl,jh
      real*8 p,one
      parameter (one = 1.0d0)
*----------------------------------------------------------------------
*100
*     * ndavx et ndavy: nombre de points de grille dans la bande de 
*     *                 pilotage (eponge) excluant les frontieres.
*
      nit  = ldni-is
      njt  = ldnj-js
*
      il   = 1   + ndavx
      ih   = nit - ndavx
      jl   = 1   + ndavy
      jh   = njt - ndavy
*
      if (north.eq.1) then
      do k=1,lnk
*north
         do j=jh+1,njt
         do i=1,ldni
            p = wh_n(j+js)
            fn(i,j,k)= (one-p)*fn(i,j,k)+p*fd(i,j,k)
         end do
         end do
         do j=njt+1,ldnj
         do i=1,ldni
            fn(i,j,k) = fd(i,j,k)
         end do
         end do
      end do
      endif
*
      if (south.eq.1) then
      do k=1,lnk
*south
         do j=1,jl-1
         do i=1,ldni
            p = wh_s(j)
            fn(i,j,k)= (one-p)*fn(i,j,k)+p*fd(i,j,k)
         end do
         end do
      end do
      endif
*
      if (west.eq.1) then
      do k=1,lnk
*west
         do i=1,il-1
         do j=1,ldnj
            p = wh_w(i)
            fn(i,j,k)= (one-p)*fn(i,j,k)+p*fd(i,j,k)
         end do
         end do
      end do
      endif
*
      if (east.eq.1) then
      do k=1,lnk
*east
         do i=ih+1,nit
         do j=1,ldnj
            p = wh_e(i+is)
            fn(i,j,k)= (one-p)*fn(i,j,k)+p*fd(i,j,k)
         end do
         end do
         do i=nit+1,ldni
         do j=1,ldnj
            fn(i,j,k) = fd(i,j,k)
         end do
         end do
      end do
      endif
*
*----------------------------------------------------------------------
*
      return
      end



@
