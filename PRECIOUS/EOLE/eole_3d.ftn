***s/r eole_3d
*
      subroutine eole_3d( geobus, ngeop )
      implicit none
*
**
#include "nesting.cdk"
#include "dynmem.cdk"
#include "tracers.cdk"
#include "nestpnt.cdk"
#include "yomdyn.cdk"
#include "yomdyn1.cdk"
c#include "yomdyn2.cdk"
#include "consdyn_8.cdk"
#include "levels.cdk"
#include "partopo.cdk"
c
#include "topo.cdk"
#include "h_geop.cdk"
#include "init.cdk"
#include "eole.cdk"
#include "rec.cdk"
#include "grd.cdk"
*    
      integer i,j,k,n,gnix,gnjy,dim,err,kc
      real*8 c1, tropo
      real tp1,tp2,qp1,s,d,qstar
      pointer (patp1, tp1(gni+2*hx,gnj+2*hy,gnk)),
     $        (patp2, tp2(gni+2*hx,gnj+2*hy,gnk)),
     $        (paqp1, qp1(gni+2*hx,gnj+2*hy,0:gnk)),
     $        (pas1 ,s(*)), (pad1 ,d(*))
      real*8 rtstar1
c
      integer ngeop
      real geobus(ngeop)
c
      integer ni1, nj1, ier
      real rot, fzero, utmp, vtmp
      real lat, lon, alpha, cosa, sina
      integer gdid, ezgdef_fmem, gdll, gdrls, ig1, ig2, ig3, ig4
      real deglat, deglon, speed, direc
      pointer (padeglat, deglat(gni+2*hx,gnj+2*hy)), 
     &        (padeglon, deglon(gni+2*hx,gnj+2*hy)),
     &        (paspeed, speed(gni+2*hx,gnj+2*hy)),
     &        (padirec, direc(gni+2*hx,gnj+2*hy))
c
      character*1 grdtyp
      real xr,yr
      real*8 c2, c3, d2r, d60, xpos, ypos, a2, a3, a4, a5
      parameter ( a2=1000.0d0, a3=180.0d0, a4=2.0d0, a5=90.0d0 )
      real xpq1, ypq1, xtmp, ytmp
      pointer (paxpq1,xpq1(*)), (paypq1,ypq1(*))
      pointer (paxtmp,xtmp(*)), (paytmp,ytmp(*))
c
      integer km1, kp1
      real*8 beta, dh, dqdz, pt5
      real hht(minx:maxx,miny:maxy,gnk), hhm(minx:maxx,miny:maxy,0:gnk)
      real hhw(minx:maxx,miny:maxy,  gnk)
c
      real qstr1(minx:maxx,miny:maxy,0:gnk),
     &     nssq1(minx:maxx,miny:maxy,gnk),
     &     gots1(minx:maxx,miny:maxy,gnk),
     &     orts1(minx:maxx,miny:maxy,0:gnk)
c
!RB2016>>
      real atan2d, xatan2d, yatan2d  !atan2d not available in gfortran 4.6.3
      atan2d(xatan2d,yatan2d)=atan2(xatan2d,yatan2d)/d2r
!RB2016<<
      pt5  = 0.5d0
c
      rot = 2. * omega_8
      d2r = dble(pi_8) / a3
c
*
****
*     Mise en place des profils
****
      gnix = gni+2*hx
      gnjy = gnj+2*hy
      if (myproc.eq.0) then
         call hpalloc (patp1, gnix*gnjy*gnk,     err, 1)
         call hpalloc (patp2, gnix*gnjy*gnk,     err, 1)
         call hpalloc (paqp1, gnix*gnjy*(gnk+1), err, 1)
      endif
*
      if (myproc.eq.0) then
         do k=1,gnk
         do j=1,gnjy
         do i=1,gnix
            tp1(i,j,k) = 0.            ! no humidity
         end do
         end do
         end do
      endif
      call glbdist2 (tp1,hmp ,minx,maxx,miny,maxy,gni+hx,gnj+hy,gnk)
*
      if (myproc.eq.0) then
         do k=1,gnk
            if (zm(k).gt.haut4) then
               if (k.gt.1) then
                  tp1(1,1,k)=tp1(1,1,k-1)
                  tp2(1,1,k)=tp2(1,1,k-1)
               else
                  print*,'zm(1) > haut4'
                  print*,'Initialisation du profil de vent avec ug et vg'
                  tp1(1,1,k)=uvg
                  tp2(1,1,k)=vvg
               endif
            else
               call intcub_2pts_2d2('u',zm(k),tp1(1,1,k))
               call intcub_2pts_2d2('v',zm(k),tp2(1,1,k))
            endif
         print*,'ug (',k,')=',tp1(1,1,k)
         print*,'vg (',k,')=',tp2(1,1,k)
         end do
*
         if ( flat0 .gt. 90. .or. flat0 .lt. -90. ) then
            do k=1,gnk
            do j=1,gnjy
            do i=1,gnix
               tp1(i,j,k) = tp1(1,1,k)
               tp2(i,j,k) = tp2(1,1,k)
            enddo
            enddo
            enddo
         else           ! Input is the normalized geostrophic wind
            fzero = rot * sin( flat0 * d2r )
            do k=1,gnk
               utmp = tp1(1,1,k)
               vtmp = tp2(1,1,k)
               do j=1,gnjy
               do i=1,gnix
                  tp1(i,j,k) = utmp * fzero / fcor(i-hx,j-hy)
                  tp2(i,j,k) = vtmp * fzero / fcor(i-hx,j-hy)
               enddo
               enddo
            enddo
         endif
      if ( rotarb ) then
         ni1 = Grd_ni
         nj1 = Grd_nj
         call hpalloc( paxpq1, (ni1-1), ier, 1 ) 
         call hpalloc( paypq1, (nj1-1), ier, 1 )
         d60 = dble(Grd_dx)
         grdtyp=' '  !  to trap invalid cases
         if ( Grd_proj_S .eq. 'P' ) then
            grdtyp = 'N'
            call xyfll (xr,yr,Grd_latr,Grd_lonr,Grd_dx,Grd_dgrw,1)
            xpos  = (dble(xr)-dble(Grd_iref-1)) * d60 / a2 + d60 / a2
            ypos  = (dble(yr)-dble(Grd_jref-1)) * d60 / a2 + d60 / a2
            call xpyp_n ( xpq1, ypq1, xpos, ypos, 0,0,d60,ni1-1,nj1-1)
c
            call hpalloc( paxtmp, (ni1-1), ier, 1 ) 
            call hpalloc( paytmp, (nj1-1), ier, 1 )
            do i = 1, ni1-1
               xtmp(i) = xpq1(i) * a2 / d60
            enddo
            do j = 1, nj1-1
               ytmp(j) = ypq1(j) * a2 / d60
            enddo
c
            do j = 1, nj1-1
            do i = 1, ni1-1
               call llfxy ( lat, lon, xtmp(i), ytmp(j), Grd_dx,
     &                      Grd_dgrw, 1 )
               alpha = 270. - lon - Grd_dgrw
               cosa = cos( alpha * d2r )
               sina = sin( alpha * d2r )
               do k = 1, gnk
                  utmp = tp1(i,j,k)
                  vtmp = tp2(i,j,k)
                  tp1(i,j,k) = utmp * cosa + vtmp * sina
                  tp2(i,j,k) = vtmp * cosa - utmp * sina
               enddo
            enddo
            enddo
            call hpdeallc( paxtmp, ier, 1 )
            call hpdeallc( paytmp, ier, 1 )
         else if ( Grd_proj_S .eq. 'M' .or. Grd_proj_S .eq. 'L' ) then
            if ( Grd_proj_S .eq. 'M' ) then
               grdtyp = 'E'
               c2 = dble(rayt_8) / a2 * cos(dble(Grd_phir) * d2r ) * d2r
               c1 = d60 / a2 / c2
               c2 = a4 / d2r
               c3 = c1 * d2r
               xpos = dble(Grd_lonr) + (dble(2-Grd_iref)) * c1
               ypos = c2*atan(tan(dble(Grd_latr+90.)/c2)*exp(c3*
     &                (dble(2-Grd_jref)) ))-a5
               call xpyp_m( xpq1, ypq1, xpos, ypos, 0,0,c1,ni1-1,nj1-1 )
            else
               grdtyp = 'E'
               c1   = Grd_dx    ! directly in degree lat-lon
               xpos = dble(Grd_lonr) + (dble(2-Grd_iref)) * c1
               ypos = dble(Grd_latr) + (dble(2-Grd_jref)) * c1
               call xpyp_l (xpq1,ypq1,xpos,ypos,0,0,c1,ni1-1,nj1-1)
            endif
            call hpalloc( padeglat, (ni1-1)*(nj1-1), ier, 1 )
            call hpalloc( padeglon, (ni1-1)*(nj1-1), ier, 1 )
            call hpalloc( paspeed, (ni1-1)*(nj1-1), ier, 1 )
            call hpalloc( padirec, (ni1-1)*(nj1-1), ier, 1 )
c
            call cxgaig ( 'E', ig1, ig2, ig3, ig4, Grd_xlat1, Grd_xlon1,
     &                    Grd_xlat2, Grd_xlon2 )
            gdid = ezgdef_fmem ( ni1-1, nj1-1, 'Z', 'E', ig1, ig2, ig3, 
     &                           ig4, xpq1, ypq1 )
            ier = gdll ( gdid, deglat, deglon )
c
            do k = 1, gnk
               do j = 1, nj1-1
               do i = 1, ni1-1
                  direc(i,j) = atan2d( -tp1(i,j,k), -tp2(i,j,k) )
                  if ( direc(i,j) .lt. 0. ) direc(i,j) = direc(i,j)
     &                                                  + 360.
                  speed(i,j) = sqrt( tp1(i,j,k)**2 + tp2(i,j,k)**2 )
               enddo
               enddo
               call gduvfwd( gdid, tp1(1,1,k), tp2(1,1,k), speed, direc,
     &                       deglat, deglon, (ni1-1)*(nj1-1) )
            enddo
            ier = gdrls (gdid)
            call hpdeallc( padeglat, ier, 1 )
            call hpdeallc( padeglon, ier, 1 )
            call hpdeallc( paspeed, ier, 1 )
            call hpdeallc( padirec, ier, 1 )
         else
            print*, 'Unexpected projection:', Grd_proj_S
         endif
         call hpdeallc( paxpq1, ier, 1 )
         call hpdeallc( paypq1, ier, 1 )
      endif
      endif
c
      call glbdist2 (tp1,up  ,minx,maxx,miny,maxy,gni+hx,gnj+hy,gnk)
      call glbdist2 (tp2,vp  ,minx,maxx,miny,maxy,gni+hx,gnj+hy,gnk)
*
      do k=1,gnk 
         do j=1-hy,ldnj+hy
         do i=1-hx,ldni+hx
            up(i,j,k) = up(i,j,k) / sqrt( sby(i,j) )
            vp(i,j,k) = vp(i,j,k) / sqrt( sbx(i,j) )
         end do
         end do
      end do
*
      tropo = 10000.d0
      if (myproc.eq.0) then
      do k=1,gnk
         if (ztr(k).le.tropo) then
	    if (ztr(k).gt.haut4) then 
               call intlin(haut3,haut4,tprofil3,tprofil4,
     $         ztr(k),tp1(1,1,k))
            else
               call intcub_2pts_2d2('t',ztr(k),tp1(1,1,k))
            endif
	 else
	       tp1(1,1,k)=tp1(1,1,k-1)
	 endif
      enddo
      endif
*
****
*     Calcul des valeurs pleines : P=Pstar+Pprime
****
c***  use new variables Tprime and Qprime (beginning), Jan. 2003
c
      my_psol = 100000.0d0
*      
      if (myproc.eq.0) then
c
         do j=1-hy,ldnj+hy
         do i=1-hx,ldni+hx
            hhm(i,j,0)=hh0i(i,j,1)
         end do
         end do
c
         do k=1,gnk 
            do j=1-hy,ldnj+hy
            do i=1-hx,ldni+hx
               hhw(i,j,k)=h_geop(zt(k),i,j)
               hhm(i,j,k)=h_geop(zm(k),i,j)
               hht(i,j,k)=h_geop(ztr(k),i,j)
            end do
            end do
c*** debug
         print*, 'In eole_3d: before qntstar:'
         print*, 'k, hht=', k, hht(-2,-2,k)
         print*, 'k, hhm=', k, hhm(-2,-2,k)
         print*, 'k, hhw=', k, hhw(-2,-2,k)
c*** debug
         end do
c
c*** Oct 16
c         call qntstar(qstr,nssq,gots,orts,hht,hhm,
         call qntstar( qstr1, nssq1, gots1, orts1, hht, hhm,
     &                 (maxx-minx+1)*(maxy-miny+1), 0, gnk )
c*** Oct 16
c*** debug
         print*, 'In eole_3d: after qntstar:'
c*** debug

*
         c1 = grav_8 / rgasd_8
c
         qp1(1,1,0) = dlog(my_psol)
*
         qp1(1,1,1) = qp1(1,1,0)-c1/tp1(1,1,1)*dble(zm(1))  !zm(0) n existe pas
*
      print*,'k=',0,'t=              p=',exp(qp1(1,1,0))
      print*,'k=',1,'t=',tp1(1,1,1),'p=',exp(qp1(1,1,1))
*
      do k=2,gnk
         qp1(1,1,k)= qp1(1,1,k-1)-c1/tp1(1,1,k)*(zm(k)-zm(k-1))
         print*,'k=',k,'t=',tp1(1,1,k),'p=',exp(qp1(1,1,k))
      end do
*
****
*     Calcul des perturbations
****
      do k = 0, gnk
         qp1(1,1,k) = ( qp1(1,1,k) - qstr1(1,1,k) ) / orts1(1,1,k)
      end do
c
      print*,'k=',0,'tprime=              qprime=',qp1(1,1,0)
c
      do k = 1, gnk
         km1=max(k-1,1)
         kp1=min(k+1,gnk)
         beta = nssq1(1,1,k) / grav_8 - gots1(1,1,k) / cpd_8
         dh = ( hhw(1,1,kp1) - hhw(1,1,km1) ) * pt5
         dqdz = ( qp1(1,1,k) - qp1(1,1,k-1) ) / dh
     &         - ( qp1(1,1,k) + qp1(1,1,k-1) ) * pt5 * beta
         tp1(1,1,k) = grav_8 * dqdz / ( grav_8 - dqdz )
c
         print*,'k=',k,'tprime=',tp1(1,1,k),'qprime=',qp1(1,1,k),
     &          'beta, dh, dqdz=', beta, dh, dqdz
      end do
**********************************
*
****
*     Champs constants de dq et T en (x,y)
****
      do j=1,gnjy
      do i=1,gnix
         qp1 (i,j,0)= qp1(1,1,0)
      end do
      end do
*
      do k=1,gnk
      do j=1,gnjy
      do i=1,gnix         
         tp1 (i,j,k)= tp1(1,1,k)
         qp1 (i,j,k)= qp1(1,1,k)
      end do
      end do
      end do
*
      endif
*
      call glbdist2 (tp1,tpp  ,minx,maxx,miny,maxy,gni+hx,gnj+hy,gnk)
      call glbdist2 (qp1,qpp  ,minx,maxx,miny,maxy,gni+hx,gnj+hy,gnk+1)
*
*     do the pressure balance for geostrophic flow (operates on qpp)
      print *,'s/r eole_qbal called....'
*
      call eole_qbal
*
*
* Vertical motion
*
      do k=1,gnk
         do j=1-hy,ldnj+hy
         do i=1-hx,ldni+hx
            swp(i,j,k) = 0.
         end do
         end do
      end do
*
      if ((glconta).and.(iconta.ne.0)) then
         do k=1,gnk
            do j=1-hy,ldnj+hy
            do i=1-hx,ldni+hx
               clp(i,j,k,iconta)     = 0.
               clnestt(i,j,k,iconta) = 1.
            end do
            end do
         end do
         call nesajr 
     $            (clp(1-hx,1-hy,1,iconta),clnestt(1-hx,1-hy,1,iconta),
     $                 minx,maxx,miny,maxy,gnk,1,1,hblen_x,hblen_y)
      endif
      print *,' eole_3d. glconta, iconta, ntr=',glconta, iconta, ntr
c---- A Buble is introduced as a tracer
      if (myproc.eq.0) then  
         kc=0
         do k=1,gnk-1
            if (zm(k).lt.blb_zp) kc=k
         enddo
         print *,"kc=",kc," : ",zm(kc)
         do k=1,gnk
         do j=1,gnjy
         do i=1,gnix
            tp1(i,j,k)=100./(1.+
     $           (real(k-kc)/real(blb_zs))**4.+
     $           (real(i-gnix/4)/real(blb_xs))**4.)
c     tp1(i,j,k)= min(5,max(5-abs(i-gnix/4),0))
c     tp1(i,j,k)= 1.
*     tp1(i,j,k)= 0.
         end do
         end do
         end do
      endif
*     attention ... 
*     le Bubble tracer doit aller en derniere place des traceurs
      call glbdist2 (tp1,clp(minx,miny,1,ntr) ,
     $     minx,maxx,miny,maxy,gni+hx,gnj+hy,gnk)
c---- 
      if (ctebcs) then
         do k=1,gnk
         do j=1-hy,ldnj+hy
         do i=1-hx,ldni+hx
             unesta(i,j,k) =  up(i,j,k)
             vnesta(i,j,k) =  vp(i,j,k)
            swnesta(i,j,k) = swp(i,j,k)
            tpnesta(i,j,k) = tpp(i,j,k)
            qpnesta(i,j,k) = qpp(i,j,k)
            hmnesta(i,j,k) = hmp(i,j,k)
         end do
         end do
         do n=1,ntr
            do j=1-hy,ldnj+hy
            do i=1-hx,ldni+hx
               clnesta(i,j,k,n) = clp(i,j,k,n)
            end do
            end do
         end do
         end do
         do j=1-hy,ldnj+hy
         do i=1-hx,ldni+hx
            qpnesta(i,j,0) = qpp(i,j,0)
         end do
         end do
      endif
*
      dim = ndynvar*dim3d+dim2d
      pas1 = paqpp
      pad1 = paqp0
      do i=1,dim
         d(i) = s(i)
      end do
*     
      do k=1,gnk
         do j=1-hy,ldnj+hy
            do i=1-hx,ldni+hx
               unestt(i,j,k) =  up(i,j,k)
               vnestt(i,j,k) =  vp(i,j,k)
               swnestt(i,j,k) = swp(i,j,k)
               tpnestt(i,j,k) = tpp(i,j,k)
               qpnestt(i,j,k) = qpp(i,j,k)
               hmnestt(i,j,k) = hmp(i,j,k)
            end do
         end do
      end do
      do n = 1, ntr
         do k=1,gnk
            do j=1-hy,ldnj+hy
               do i=1-hx,ldni+hx
*                  clnestt(i,j,k,n) = clp(i,j,k,n)
               end do
            end do
         end do
      end do
      do j=1-hy,ldnj+hy
      do i=1-hx,ldni+hx
         qpnestt(i,j,0) = qpp(i,j,0)
      end do
      end do
*     
      if (myproc.eq.0) then
         write (6,602)
         call hpdeallc (patp1 ,err,1)
         call hpdeallc (patp2 ,err,1)
         call hpdeallc (paqp1 ,err,1)
      endif
*
      if ( fhalo .and. vraies_mtn.eq.2 ) then
         call draglaw ( geobus, ngeop )
      endif
c
 602  format (/'INITIALIZATION OF EOLE PROBLEM COMPLETED')
*---------------------------------------------------------------------
      return
      end
