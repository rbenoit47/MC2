      subroutine eole_qbal
*
#include "impnone.cdk"
*
#include "grd.cdk"
* Revision:
*        01: Wei Yu, July 7, 2003
*            1) Introduce the variation of map scale factor and
*               Coriolis factor
*            2) Staggering of the Coriolis factor
*
*
#include "yomdyn.cdk"
#include "yomdyn1.cdk"
c#include "yomdyn2.cdk"
#include "dynmem.cdk"
#include "rec.cdk"
#include "levels.cdk"
c***
#include "topo.cdk"
#include "h_geop.cdk"
#include "eole.cdk"
*
      integer   i, j, k, kk, km, kp, err,nb_instab
      real*8    dxi, dyi, one, two, three, p25,
     $          c1, vbarxy, ubarxy, tpbarz, dz,
     $          vr(minx:maxx,miny:maxy,0:nk),
     $          ur(minx:maxx,miny:maxy,0:nk),
     $          qpr(minx:maxx,miny:maxy)
*
#include "partopo.cdk"
#include "consdyn_8.cdk"
      integer gnix, gnjy
      real up0(minx:maxx,miny:maxy), vp0(minx:maxx,miny:maxy)
      real glbup0, glbvp0
      pointer ( paup0, glbup0(gni+2*hx,gnj+2*hy) )
      pointer ( pavp0, glbvp0(gni+2*hx,gnj+2*hy) )
      real rot, fzero
      real lat, lon, utmp, vtmp, alpha, cosa, sina, kinetic
      integer ni1, nj1, ier
      integer gdid, ezgdef_fmem, gdll, gdrls, ig1, ig2, ig3, ig4
      real deglat, deglon, speed, direc
      pointer (padeglat, deglat(gni+2*hx,gnj+2*hy)), 
     &        (padeglon, deglon(gni+2*hx,gnj+2*hy)),
     &        (paspeed, speed(gni+2*hx,gnj+2*hy)),
     &        (padirec, direc(gni+2*hx,gnj+2*hy))
c
      character*1 grdtyp
      real xr,yr
      real*8 c2, c3, d2r, d60, xpos, ypos, a2, a3, a4, a5
      parameter ( a2=1000.0d0, a3=180.0d0, a4=2.0d0, a5=90.0d0 )
      real xpq1, ypq1, xtmp, ytmp
      pointer (paxpq1,xpq1(*)), (paypq1,ypq1(*))
      pointer (paxtmp,xtmp(*)), (paytmp,ytmp(*))
c
      parameter (p25=0.25, one = 1.0)
      real ref_adiab, ref_conv, critere_stab, petit
      pointer (pat_ad, ref_adiab(2:gnk)),
     $          (pat_cv, ref_conv(2:gnk))
      parameter (critere_stab=9.3)  !refroidissement adiab : -9.8C/km
      parameter (petit=0.0001)
c ***
      integer km1, kp1
      real*8 beta, dh, dqdz, pt5
      real hht(minx:maxx,miny:maxy,gnk), hhm(minx:maxx,miny:maxy,0:gnk)
      real hhw(minx:maxx,miny:maxy,  gnk)
c
      real qstr1(minx:maxx,miny:maxy,0:gnk),
     &     nssq1(minx:maxx,miny:maxy,gnk),
     &     gots1(minx:maxx,miny:maxy,gnk),
     &     orts1(minx:maxx,miny:maxy,0:gnk)
!RB2016>>
      real atan2d, xatan2d, yatan2d  !atan2d not available in gfortran 4.6.3
      atan2d(xatan2d,yatan2d)=atan2(xatan2d,yatan2d)/d2r
!RB2016<<
c
      pt5  = 0.5d0
c ***
*     ------------------------------------
*
      rot = 2. * omega_8
      d2r = dble(pi_8) / a3
      gnix = gni + 2 * hx
      gnjy = gnj + 2 * hy
c
      dxi  = one / dble(grdx)
      dyi  = one / dble(grdy)
*
*PDIR PARDO FOR=ncpudyn
*
****
* Calcul de grad (q) : ur=R(Tstar+Tprime)dq/dx ; vr=R(Tstar+Tprime)dq/dy
****
      if (myproc.eq.0) then
         call hpalloc (paup0, gnix*gnjy,     err, 1)
         call hpalloc (pavp0, gnix*gnjy,     err, 1)
c
         if ( flat0 .gt. 90. .or. flat0 .lt. -90. ) then
            do j = 1, gnjy
            do i = 1, gnix
               glbup0(i,j) = uprofil1
               glbvp0(i,j) = vprofil1
            end do
            end do
         else
            fzero = rot * sin( flat0 * d2r )
            do j = 1, gnjy
            do i = 1, gnix
               glbup0(i,j) = uprofil1 * fzero / fcor(i-hx,j-hy)
               glbvp0(i,j) = vprofil1 * fzero / fcor(i-hx,j-hy)
            end do
            end do
         endif
c
         if ( rotarb ) then
            ni1 = Grd_ni
            nj1 = Grd_nj
c
            call hpalloc( paxpq1, (ni1-1), ier, 1 )
            call hpalloc( paypq1, (nj1-1), ier, 1 )
c
            d60 = dble(Grd_dx)
            grdtyp=' '  !  to trap invalid cases
c
            if ( Grd_proj_S .eq. 'P' ) then
               grdtyp = 'N'
               call xyfll (xr,yr,Grd_latr,Grd_lonr,Grd_dx,Grd_dgrw,1)
               xpos  = (dble(xr)-dble(Grd_iref-1)) * d60 / a2 + d60 / a2
               ypos  = (dble(yr)-dble(Grd_jref-1)) * d60 / a2 + d60 / a2
               call xpyp_n( xpq1, ypq1, xpos, ypos, 0,0,d60,ni1-1,nj1-1)
c
               call hpalloc( paxtmp, (ni1-1), ier, 1 )
               call hpalloc( paytmp, (nj1-1), ier, 1 )
               do i = 1, ni1-1
                  xtmp(i) = xpq1(i) * a2 / d60
               enddo
               do j = 1, nj1-1
                  ytmp(j) = ypq1(j) * a2 / d60
               enddo
c
               do j = 1, nj1-1
               do i = 1, ni1-1
                  call llfxy ( lat, lon, xtmp(i), ytmp(j), Grd_dx,
     &                         Grd_dgrw, 1 )
                  alpha = 270. - lon - Grd_dgrw
                  cosa = cos( alpha * d2r )
                  sina = sin( alpha * d2r )
c
                  utmp = glbup0(i,j)
                  vtmp = glbvp0(i,j)
                  glbup0(i,j) = utmp * cosa + vtmp * sina
                  glbvp0(i,j) = vtmp * cosa - utmp * sina
               enddo
               enddo
               call hpdeallc( paxtmp, ier, 1 )
               call hpdeallc( paytmp, ier, 1 )
            else if( Grd_proj_S .eq. 'M' .or. Grd_proj_S .eq. 'L' ) then
               if ( Grd_proj_S .eq. 'M' ) then
                  grdtyp = 'E'
                  c2 = dble(rayt_8)/a2*cos(dble(Grd_phir) * d2r ) * d2r
                  c1 = d60 / a2 / c2
                  c2 = a4 / d2r
                  c3 = c1 * d2r
                  xpos = dble(Grd_lonr) + (dble(2-Grd_iref)) * c1
                  ypos = c2*atan(tan(dble(Grd_latr+90.)/c2)*exp(c3*
     &                   (dble(2-Grd_jref)) ))-a5
                  call xpyp_m( xpq1, ypq1,xpos,ypos,0,0,c1,ni1-1,nj1-1 )
               else
                  grdtyp = 'E'
                  c1   = Grd_dx    ! directly in degree lat-lon
                  xpos = dble(Grd_lonr) + (dble(2-Grd_iref)) * c1
                  ypos = dble(Grd_latr) + (dble(2-Grd_jref)) * c1
                  call xpyp_l (xpq1,ypq1,xpos,ypos,0,0,c1,ni1-1,nj1-1)
               endif
c
               call hpalloc( padeglat, (ni1-1)*(nj1-1), ier, 1 )
               call hpalloc( padeglon, (ni1-1)*(nj1-1), ier, 1 )
               call hpalloc( paspeed, (ni1-1)*(nj1-1), ier, 1 )
               call hpalloc( padirec, (ni1-1)*(nj1-1), ier, 1 )
c
               call cxgaig ( 'E', ig1, ig2, ig3, ig4, Grd_xlat1, 
     &                       Grd_xlon1, Grd_xlat2, Grd_xlon2 )
               gdid = ezgdef_fmem ( ni1-1, nj1-1, 'Z', 'E', ig1, ig2,
     &                              ig3, ig4, xpq1, ypq1 )
               ier = gdll( gdid, deglat, deglon )
c
               do j = 1, nj1-1
               do i = 1, ni1-1
                  direc(i,j) = atan2d( -glbup0(i,j), -glbvp0(i,j) )
                  if ( direc(i,j) .lt. 0. ) direc(i,j) = direc(i,j)
     &                                                  + 360.
                  speed(i,j) = sqrt( glbup0(i,j)**2 + glbvp0(i,j)**2 )
               enddo
               enddo
               call gduvfwd( gdid, glbup0, glbvp0, speed, direc,
     &                       deglat, deglon, (ni1-1)*(nj1-1) )
c
               ier = gdrls (gdid)
               call hpdeallc( padeglat, ier, 1 )
               call hpdeallc( padeglon, ier, 1 )
               call hpdeallc( paspeed, ier, 1 )
               call hpdeallc( padirec, ier, 1 )
            else
               print*, 'Unexpected projection:', Grd_proj_S
            endif
            call hpdeallc( paxpq1, ier, 1 )
            call hpdeallc( paypq1, ier, 1 )
         endif
      endif
c
ccc   Distribute global domain to the subdomaines
c
      call glbdist2( glbup0, up0, minx, maxx, miny, maxy, gni+hx,
     &               gnj+hy, 1 )
      call glbdist2( glbvp0, vp0, minx, maxx, miny, maxy, gni+hx,
     &               gnj+hy, 1 )
c
      do j=1-hy,ldnj+hy
      do i=1-hx,ldni+hx
         up0(i,j) = up0(i,j) / sqrt( sby(i,j) )
         vp0(i,j) = vp0(i,j) / sqrt( sbx(i,j) )
      end do
      end do
c
      if (myproc.eq.0) then
         call hpdeallc (paup0 ,err,1)
         call hpdeallc (pavp0 ,err,1)
      endif
c
      do k = 0, gnk-1
         do j = 1-hy, ldnj+hy-1
         do i = 1-hx+1,ldni+hx
            if ( k .eq. 0 ) then
               vbarxy    = p25 * ( ( vp0(i-1,j+1) + vp0(i-1,j) ) +
     &                             ( vp0(i  ,j+1) + vp0(i  ,j) ) )
               kinetic   = ( up0(i,j)*up0(i,j) + vbarxy*vbarxy ) * pt5
            else
               vbarxy    = p25 * ( ( vp(i-1,j+1,k)+vp(i-1,j,k) ) +
     $                             ( vp(i  ,j+1,k)+vp(i  ,j,k) ) )
               kinetic   = ( up(i,j,k)*up(i,j,k) + vbarxy*vbarxy ) * pt5
            endif
c
            ur(i,j,k) = + vbarxy * ( fcor(i,j+1) + fcor(i,j) ) * pt5
     &                  - kinetic * ( sbxy(i,j) - sbxy(i-1,j) ) * dxi
         end do
         end do
*
         do j = 1-hy+1,ldnj+hy
         do i = 1-hx,ldni+hx-1
            if ( k .eq. 0 ) then
               ubarxy    = p25 * ( ( up0(i+1,j-1) + up0(i,j-1) )
     $                           + ( up0(i+1,j  ) + up0(i,  j) ) )
               kinetic   = ( vp0(i,j)*vp0(i,j) + ubarxy*ubarxy ) * pt5
            else
               ubarxy    = p25 * ( ( up(i+1,j-1,k)+up(i,j-1,k) )
     $                           + ( up(i+1,j  ,k)+up(i,  j,k) ) )
               kinetic   = ( vp(i,j,k)*vp(i,j,k) + ubarxy*ubarxy ) * pt5
            endif
c
            vr(i,j,k) = - ubarxy * ( fcor(i+1,j) + fcor(i,j) ) * pt5
     &                  - kinetic * ( sbxy(i,j) - sbxy(i,j-1) ) * dyi
         end do
         end do
*
         i=ldni+hx
         do j = 1-hy+1,ldnj+hy
            vr(i,j,k) = vr(i-1,j,k)   !OK car grad q constant
         enddo
      enddo
*
****
*     qpp by integration
*     Tout doit etre constant dans l equilibre geostrophique
****
      do k=0,gnk
*         kk=min(gnk-1,max(1,k))
         kk=min(gnk-1,k)
         km=max(1,k)
         kp=min(gnk,k+1)
         tpbarz=(tpp(1,1,km)+tpp(1,1,kp))*pt5
c
         c1 = dble(grdx) / ( 1 + tpbarz / grav_8 )
*
*     mid point
*
            i=ldni/2
            j=ldnj/2
            qpr(i,j)=qpp(i,j,k)   !Calculs en double precision
*
*     mid row minus mid point
*
*     A k=0, ur pas defini. Si defini, probleme dans runsor pour TT !!?
            do i= ldni/2-1,1-hx,-1
               qpr(i,j) = qpr(i+1,j) - c1 * ur(i+1,j,kk)
            enddo
*
            do i= ldni/2+1,ldni+hx
               qpr(i,j) = qpr(i-1,j) + c1 * ur(i,j,kk)
            enddo
*
*     other rows
*
         do j= ldnj/2-1,1-hy,-1
            do i= 1-hx,ldni+hx
               qpr(i,j) = qpr(i,j+1) - c1 * vr(i,j+1,kk)
            enddo
         enddo
*
         do j= ldnj/2+1,ldnj+hy
            do i= 1-hx,ldni+hx
               qpr(i,j) = qpr(i,j-1) + c1 * vr(i,j,kk)
            enddo
         enddo
*
         do j= 1-hy,ldnj+hy
            do i= 1-hx,ldni+hx
               qpp(i,j,k)=qpr(i,j)
            enddo
         enddo
c ***
         print*, 'in eole_qbal: k, qpp = ', k, qpp(3,3,k)
      enddo
*
****
*     Iteration avec l'equation hydrostatique pour trouver 
*        un profil de temperature T(x,y,z) plus proche des 2 equilibres
****
c
         do j=1-hy,ldnj+hy
         do i=1-hx,ldni+hx
            hhm(i,j,0)=hh0i(i,j,1)
         end do
         end do
c
         do k=1,gnk 
            do j=1-hy,ldnj+hy
            do i=1-hx,ldni+hx
               hhw(i,j,k)=h_geop(zt(k),i,j)
               hhm(i,j,k)=h_geop(zm(k),i,j)
               hht(i,j,k)=h_geop(ztr(k),i,j)
            end do
            end do
         end do
c
         call qntstar( qstr1, nssq1, gots1, orts1, hht, hhm,
     &                 (maxx-minx+1)*(maxy-miny+1), 0, gnk )
c
      do k=1,gnk
         dz = zm(1)
         if(k.ne.1) dz = zm(k) - zm(k-1)
         km1=max(k-1,1)
         kp1=min(k+1,gnk)
         do j= 1-hy,ldnj+hy
            do i= 1-hx,ldni+hx
               beta = nssq1(i,j,k) / grav_8 - gots1(i,j,k) / cpd_8
               dh = ( hhw(i,j,kp1) - hhw(i,j,km1) ) * pt5
               dqdz = ( qpp(i,j,k) - qpp(i,j,k-1) ) / dh
     &               - ( qpp(i,j,k) + qpp(i,j,k-1) ) * pt5 * beta
               tpp(i,j,k)= grav_8 * dqdz / ( grav_8 - dqdz )
            enddo
         enddo
         print*,'tprime_recalculee(1,1',k,'=)',tpp(1,1,k), 
     &          'beta, dh, dqdz=', beta, dh, dqdz
      enddo
*
      if (stabilite_air.eq.1) then
*     Attention, les 2 equilibres sont moins bons
         nb_instab=0
         call hpalloc (pat_ad, gnk-1, err, 1)
         call hpalloc (pat_cv, gnk-1, err, 1)
         do k=2,gnk
            ref_adiab(k)=-critere_stab*(ztr(k)-ztr(k-1))/1000.
         enddo
         do j= 1-hy,ldnj+hy
            do i= 1-hx,ldni+hx
 100           continue
               do k=2,gnk
                  ref_conv(k)=(tpp(i,j,k)-tpp(i,j,k-1))
                  ref_conv(k)=ref_conv(k)-ref_adiab(k)
               enddo
*
               k=2
 110           if (ref_conv(k).lt.(0.-petit)) then
                  nb_instab=nb_instab+1
                  tpp(i,j,k)=tpp(i,j,k-1)+ref_adiab(k)
                  tpp(i,j,k+1)=tpp(i,j,k+1)+ref_conv(k)
                  print*,' ! Profil T(',i,',',j,',',k,') -
     $ T(',i,',',j,',',k-1,') instable '
                  goto 100
               else
                  k=k+1
                  if (k.eq.gnk) then  !pas d instabilite en gnk
                     goto 200         !car profil ct de temperature
                  else
                     goto 110
                  endif
               endif
 200           continue
            enddo
         enddo
*
         call hpdeallc (pat_ad, err, 1)
         call hpdeallc (pat_cv, err, 1)
         print*,' '
         print*,'----------------------------------------------'
         print*,'Nombre d instabilites corrigees: ',nb_instab
         print*,'----------------------------------------------'

      endif
*
*----------------------------------------------------------------------
*
      return
      end
