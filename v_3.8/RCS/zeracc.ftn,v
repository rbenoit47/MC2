head	3.9;
access;
symbols;
locks; strict;
comment	@# @;


3.9
date	2003.06.16.18.51.34;	author armnphy;	state Exp;
branches;
next	3.8;

3.8
date	2003.03.12.15.49.43;	author armnbil;	state Exp;
branches;
next	;


desc
@@


3.9
log
@La version 3.9 de la physique a ete creee le 16 juin 2003.

Elle constitue la premiere version de conversion vers le
calculateur IBM.

Le nouveau code de "gravity wave drag" sgoflx3.ftn est une
copie du code linearise lin_sgoflx1.ftn.
@
text
@!copyright (C) 2001  MSC-RPN COMM  %%%RPNPHY%%%
*** S/P ZERACC
      SUBROUTINE ZERACC (F,LISTE,NOMBRE)
*
#include "impnone.cdk"
*
      REAL F(*)
      INTEGER NOMBRE
      CHARACTER*2 LISTE(NOMBRE)
*
*Author
*         B. Dugas (Oct 1996)
*Revision   
* 001      B. Dugas (May 1999) - Correct first line in PERMIS
* 002      B. Dugas (May 2000) - Adaption to v3.66 physics
* 003      B. Dugas (Feb 2001) - Add S7 and S8
* 004      B. Dugas (Dec 2001) - Replace RN by AE. Add PE, FR,
*                                RN and SN. Redefine N2
*
*
*Object
*         Puts to zero some variables of the "permanent bus",
*         namely the variables which are used to accumulate
*         fluxes or precipitation amounts in time. Used when
*         the model is run in climate mode. The list of 
*         variables processed may be given as an input.
*
*Arguments
*
*         - Input/Output -
* F       permanent bus
*
*         - Input -
* LISTE   list of variables to be processed
* NOMBRE  number of variables in LISTE. A null value
*         implies that all valid variables should treated
*
*
*Notes
*
* Here is a current list of the valid (accumulator) variables.
* Any other variable will be ignored.
*
* Radiation
* AR      Outgoing IR energy flux at model lid
* AB      Incoming solar enertgy flux at model lid
* AU      Outgoing VIS energy flux at model lid
* AD      IR energy flux towards ground
* AS      VIS energy flux towards ground
* NF      2-D cloud cover
*
* Convection/condensation
* A1      Liquid convective precipitation
* A2      Liquid stratified precipitation
* A3      Solid convective precipitation
* A4      Solid stratified precipitation
* AE      Stratified precipitation
* FR      Freezing precipitation
* PC      Convective precipitation
* PE      Refrozen precipitation
* PR      Total precipitation
* RN      Liquid precipitation
* SN      Snow precipitation
*
* Surface processes
* AH      Surface heat flux (upward)
* AG      Heat flux in the ground
* AW      surface momentum flux
* AV      Surface water vapor flux (upward)
* AI      IR energy flux at the surface
* N0      Surface runoff
* N2      Liquid precipitation (ISBA)
* N3      Solid precipitation
* N4      Solar radation flux
* O1      Base drainage
* O5      Bare ground LE flux
* O6      Direct veg LE flux
* O7      Sublimation from snow
* O8      Vegetation transpiration
* O9      Evaporation from vegetation
* S7      Zonal momentum flux
* S8      Meridional momentum flux
*
**
*
      INTEGER     NBR
      PARAMETER  (NBR = 34 )
      CHARACTER*2 PERMIS(NBR)
      INTEGER     LOCAL(NBR,2),I,J,K
*
      DATA  PERMIS /
     +     'AR','AB','AU','AD','AS','NF',
     +     'A1','A2','A3','A4','AE','FR','PC','PE','PR','RN','SN',
     +     'AH','AG','AW','AV','AI','N0','N2','N3','N4',
     +     'O1','O5','O6','O7','O8','O9','S7','S8'
     +             /
      DATA  LOCAL  / NBR*0,NBR*0 /
      SAVE  LOCAL,PERMIS
*
#include "buses.cdk"
*
*MODULES
*---------------------------------------------------------------- 
*
*     Trouver les positions des champs permis
*     au premier appel seulement.
*
      IF(LOCAL(1,1)*LOCAL(1,2).EQ.0) THEN
         DO I=1,MAXBUS
            DO J=1,NBR
               IF(PERNM(I,2).EQ.PERMIS(J) .AND.
     +            LOCAL(J,1).EQ.   0      .AND.
     +            LOCAL(J,2).EQ.   0    )  THEN
                  LOCAL(J,1) = PERPAR(I,1)
                  LOCAL(J,2) = PERPAR(I,1)+PERPAR(I,2)-1
               ENDIF
            ENDDO
         ENDDO
      ENDIF
*
*     Mise a zero.
*
      IF(NOMBRE.NE.0) THEN
         DO I=1,NOMBRE
            DO J=1,NBR
               IF(LISTE(I).EQ.PERMIS(J)) THEN
                  DO K=LOCAL(J,1),LOCAL(J,2)  
                     F(K) = 0.0
                  ENDDO
               ENDIF
            ENDDO
         ENDDO 
      ELSE
         DO J=1,NBR
            DO K=LOCAL(J,1),LOCAL(J,2)  
               F(K) = 0.0
            ENDDO
         ENDDO
      ENDIF
*
      RETURN
      END
@


3.8
log
@description_r3.8
@
text
@@
