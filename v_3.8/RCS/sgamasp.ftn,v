head	3.9;
access;
symbols;
locks; strict;
comment	@# @;


3.9
date	2003.06.16.18.51.11;	author armnphy;	state Exp;
branches;
next	3.8;

3.8
date	2003.03.12.15.49.43;	author armnbil;	state Exp;
branches;
next	;


desc
@@


3.9
log
@La version 3.9 de la physique a ete creee le 16 juin 2003.

Elle constitue la premiere version de conversion vers le
calculateur IBM.

Le nouveau code de "gravity wave drag" sgoflx3.ftn est une
copie du code linearise lin_sgoflx1.ftn.
@
text
@!copyright (C) 2001  MSC-RPN COMM  %%%RPNPHY%%%
***fonction sgamasp - pente pseudo-adiabat sature (dt/dp)
*
      function sgamasp(tt, pr, swph, ti)
*
#include "impnone.cdk"
*
      real tt, pr, ti, sgamasp
*
      logical swph
*
*author
*       N. Brunet (septembre 2000)
*
*revision
*
*object
*       to calculate saturated pseudo-adiabatic lapse rate
*       dt/dp - deg K / pa
*       --------  dt/dp is > 0
*
*arguments
*       tt - temperature (K) at which we calculate the lapse rate
*       pr - pressure (pa) at which we calculate the lapse rate
*       swph - .true., to consider water and ice phase
*              .false, to consider water phase only
*       ti - temperature (K) at which we start calculating
*            latent heat of sublimation
*            if swph=false, ti is n/a
*            ti must be .LE. trpl
*
*note
*       we compute (- dt/dp): so the result is >0
*
*implicites
#include "consphy.cdk"
*modules
      external inctphy, schal
*
**
*---------------------------------------------------------------
*
      real schal
      real latheat, lvt0, lsti, x, z
*
#include "dintern.cdk"
#include "fintern.cdk"
*
*--------------------------------------------------------------------
#include "initcph.cdk"
*
*     calcule la chaleur latente
      latheat = schal(tt, ti, swph)
*
      x = latheat / rgasd
      z = eps1 * latheat**2 / (rgasd * cpd)
*
      if(swph)then
         sgamasp = dble(cappa)*tt/pr*(1.d0+dble(x)*foqst(tt,pr)/tt) /
     +             (1.d0+dble(z)*foqst(tt,pr)/tt**2)
      else
         sgamasp = dble(cappa)*tt/pr*(1.d0+dble(x)*foqsa(tt,pr)/tt) /
     +             (1.d0+dble(z)*foqsa(tt,pr)/tt**2)
      end if
*
      return
      end
@


3.8
log
@description_r3.8
@
text
@@
