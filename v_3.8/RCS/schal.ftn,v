head	3.9;
access;
symbols;
locks; strict;
comment	@# @;


3.9
date	2003.06.16.18.51.11;	author armnphy;	state Exp;
branches;
next	3.8;

3.8
date	2003.03.12.15.49.43;	author armnbil;	state Exp;
branches;
next	;


desc
@@


3.9
log
@La version 3.9 de la physique a ete creee le 16 juin 2003.

Elle constitue la premiere version de conversion vers le
calculateur IBM.

Le nouveau code de "gravity wave drag" sgoflx3.ftn est une
copie du code linearise lin_sgoflx1.ftn.
@
text
@!copyright (C) 2001  MSC-RPN COMM  %%%RPNPHY%%%
***fonction schal - chaleur latente selon TT et SWPH
*
      function schal(tt, ti, swph)
*
#include "impnone.cdk"
*
      real tt, ti, schal
*
      logical swph
*
*author
*       N. Brunet (septembre 2000)
*
*revision
*
*object
*       to calculate the latent heat (J Kg-1) according
*       to temperature and swph
*
*arguments
*       tt - temperature in deg K
*       ti - temperature (K) at which we start calculating
*            latent heat of sublimation
*            if swph=false, ti is n/a
*            ti must be .LE. trpl
*
*note
*      if(not.swph) then schal is equal to folv
*      if(swph) at tt .le. ti, schal is equal to fols
*               at tt .ge. trpl, schal is folv
*               at tt between ti and trpl, schal is a linear
*               interpolation .
*
*implicites
#include "consphy.cdk"
*modules
      external inctphy
*
**
*---------------------------------------------------------------
*
      real lsti, lvt0
*
#include "dintern.cdk"
#include "fintern.cdk"
*
*--------------------------------------------------------------------
#include "initcph.cdk"
*
      if(swph)then
*
         if(tt.ge.trpl) then
            schal = folv(tt)
         end if
         if(tt.le.ti) then
            schal = fols(tt)
         end if
         if(tt.lt.trpl .and. tt.gt.ti .and. ti.ne.trpl)then
            lvt0 = chlc
            lsti = fols(ti)
            schal = (lsti-lvt0)*(tt-ti)/(ti-trpl)+lsti
            schal = max(min(schal,lsti), lvt0)
         end if
*
      else
*
         schal = folv(tt)
*
      end if
*
      return
      end
@


3.8
log
@description_r3.8
@
text
@@
