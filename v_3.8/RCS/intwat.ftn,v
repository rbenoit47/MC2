head	3.9;
access;
symbols;
locks; strict;
comment	@# @;


3.9
date	2003.06.16.18.50.49;	author armnphy;	state Exp;
branches;
next	3.8;

3.8
date	2003.03.12.15.49.43;	author armnbil;	state Exp;
branches;
next	;


desc
@@


3.9
log
@La version 3.9 de la physique a ete creee le 16 juin 2003.

Elle constitue la premiere version de conversion vers le
calculateur IBM.

Le nouveau code de "gravity wave drag" sgoflx3.ftn est une
copie du code linearise lin_sgoflx1.ftn.
@
text
@!copyright (C) 2001  MSC-RPN COMM  %%%RPNPHY%%%
* *S/P  INTWAT
*
      SUBROUTINE INTWAT(ICW,IWV,LWP,TLWP,T,HU,QC,
     +                  RNFLX,SNOFLX,S,PS,N,NK)
#include "impnone.cdk"
      INTEGER N,NK
*
      REAL ICW(N),IWV(N),TLWP(N),LWP(N)
      REAL HU(N,NK),T(N,NK),QC(N,NK)
      REAL RNFLX(N,NK),SNOFLX(N,NK)
      REAL S(N,NK),PS(N)
*
*Author
*          R.Sarrazin, G. Pellerin, B. Bilodeau - (Sept 1996)
*
*
*Object
*          to compute the vertical integrals of water vapor,
*          liquid water and cloud water.
*
*Arguments
*
*          - Output -
* ICW      vertical integral of cloud water/ice 
* IWV      vertical integral of water vapor
* LWP      vertical integral of water (from QC)
* TLWP     vertical integral of the total water (QC + RNFLX)
*
*          - Input/Output -
* S        local sigma level values
* PS       surface pressure
* T        virtual temperature
* Q        specific humidity
* QC       cloud water content
* RNFLX    water flux calculated in SKOCON or CONSUN
* SNOFLX   snow  flux calculated in SKOCON or CONSUN (not used)
* N        horizontal dimension
* NK       vertical   dimension
*
*
*Notes
*          The different constants used in the integrals are from
*          typical droplet/crystal sizes and terminal velocities. 
*          See "Need for the creation of new variables as output 
*               from models using the Sundqvist parameterization
*               for condensation", G. Deblonde, 19 July 1995.
*IMPLICITES
*
#include "dintern.cdk"
#include "consphy.cdk"
*
      integer i,k
      REAL dsg,dpsg,airden,qctemp
      real apri,tci,tscale,topeq0,todpmx,tabice
*
      tci=232.
      topeq0=268.
      todpmx=256.
      tscale=(todpmx-tci)*sqrt(2.)
      apri=1./(1.-exp(-((topeq0-tci)/tscale)**2))
*
      do i = 1, N
         ICW (i) = 0.
         IWV (i) = 0.
         TLWP(i) = 0.
         LWP (i) = 0.
      end do
*
      do i = 1, N
         dsg= 0.5 * ( s(i,2) - s(i,1) )
         dpsg= ps(i)*dsg/grav
         ICW(i) = ICW(i) + max( QC(i,1) , 0. ) * dpsg
         IWV(i) = IWV(i) + max( HU(i,1) , 0. ) * dpsg
         airden = s(i,1)*ps(i)/ (rgasd *T(i,1))
*
         tabice=max(apri*(exp(-(((max(T(i,1),tci)-tci)/
     +              tscale)**2))-1.)+1.,0.0)
         qctemp  = ((1.-tabice)*QC(i,1))*dpsg
         LWP (i) =  LWP(i) + qctemp
         TLWP(i) = TLWP(i) + qctemp +
     +             ((0.0866*RNFLX(i,1)**0.8385)/airden)*dpsg
      end do
*
      do k = 2,NK-1
         do i = 1 , N
            dsg= 0.5 * ( s(i,k+1) - s(i,k-1) )
            dpsg= ps(i)*dsg/grav
            ICW(i) = ICW(i) + max( QC(i,k) , 0. ) * dpsg
            IWV(i) = IWV(i) + max( HU(i,k) , 0. ) * dpsg
            airden = s(i,k)*ps(i)/ (rgasd *T(i,k))
*
            tabice = max(apri*(exp(-(((max(T(i,k),tci)-tci)/
     +                   tscale)**2))-1.)+1.,0.0)
            qctemp  = ((1.-tabice)*QC(i,k))*dpsg
            LWP (i) =  LWP(i) + qctemp
            TLWP(i) = TLWP(i) + qctemp +
     +                ((0.0866*RNFLX(i,k)**0.8385)/airden)*dpsg
         end do
      end do
*
      do i = 1, N
         dsg= 1. - 0.5 * ( s(i,NK) + s(i,NK-1) )
         dpsg= ps(i)*dsg/grav
         ICW(i) = ICW(i) + max( QC(i,NK) , 0. ) * dpsg
         IWV(i) = IWV(i) + max( HU(i,NK) , 0. ) * dpsg
         airden = s(i,NK)*ps(i)/ (rgasd *T(i,NK))
*
         tabice=max(apri*(exp(-(((max(T(i,NK),tci)-tci)/
     +              tscale)**2))-1.)+1.,0.0)
         qctemp  = ((1.-tabice)*QC(i,NK))*dpsg
         LWP (i) =  LWP(i) + qctemp
         TLWP(i) = TLWP(i) + qctemp +
     +             ((0.0866*RNFLX(i,NK)**0.8385)/airden)*dpsg
      end do
*
      RETURN
      END
@


3.8
log
@description_r3.8
@
text
@@
