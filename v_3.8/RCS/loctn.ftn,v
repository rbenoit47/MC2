head	3.9;
access;
symbols;
locks; strict;
comment	@# @;


3.9
date	2003.06.16.18.50.49;	author armnphy;	state Exp;
branches;
next	3.8;

3.8
date	2003.03.12.15.49.43;	author armnbil;	state Exp;
branches;
next	;


desc
@@


3.9
log
@La version 3.9 de la physique a ete creee le 16 juin 2003.

Elle constitue la premiere version de conversion vers le
calculateur IBM.

Le nouveau code de "gravity wave drag" sgoflx3.ftn est une
copie du code linearise lin_sgoflx1.ftn.
@
text
@!copyright (C) 2001  MSC-RPN COMM  %%%RPNPHY%%%
***FONCTION  LOCTN
*
      FUNCTION LOCTN ( VAR , M , K )
*
#include "impnone.cdk"
      CHARACTER *(*) VAR
      INTEGER LOCTN,M,K
*
*Author
*          J. Cote RPN(Dec 1984)
*
*Revision
* 001      M. Lepine  -  RFE model code revision project (Mar 87)
*                       -  Elimination of " *IF DEF "
* 002      B. Bilodeau (July 1991)- Adaptation to UNIX
*
*Object
*          to return a pointer of a variable in the system of memory
*          management; returns 0 if variable is not found
*
*Arguments
*
*          - Input -
* VAR      variable to look for
*
*          - Output -
* M        =0 or the dimension of the variable to look for
* K        =0 or the stack of the variable to look for
*
*Notes
*          See INIGST for more information
*
*
*IMPLICITES
*
#include "memcdk.cdk"
*
*
**
*
      INTEGER J
      CHARACTER *40,Z
*
*
      DO 1 K=1,MAXTSK
         DO 1 J=1,NA(K)
            IF( NOM(J,K) .EQ. VAR ) GO TO 2
    1 CONTINUE
*
      K = 0
      M = 0
      LOCTN = 0
*
      Z = '(1X,A6,A)'
      WRITE (UNIT,Z) VAR,' PAS DANS LES TABLES (LOCTN)'
      RETURN
*
    2 CONTINUE
*
      M = DIM(J,K)
      LOCTN = BAS(J,K)
*
      IF (DEBUG) THEN
         Z = '(1X,A6,A,I4,A,I1,A,I6,A)'
         WRITE (UNIT,Z) VAR,' ( ',M,' ) SITUE(E) DANS LA PILE ( ',
     X                  K,' ) A ',BAS(J,K),' (LOCTN)'
      ENDIF
*
      RETURN
      END
@


3.8
log
@description_r3.8
@
text
@@
