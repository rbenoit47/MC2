head	3.9;
access;
symbols;
locks; strict;
comment	@# @;


3.9
date	2003.06.16.18.50.49;	author armnphy;	state Exp;
branches;
next	3.8;

3.8
date	2003.03.12.15.49.43;	author armnbil;	state Exp;
branches;
next	;


desc
@@


3.9
log
@La version 3.9 de la physique a ete creee le 16 juin 2003.

Elle constitue la premiere version de conversion vers le
calculateur IBM.

Le nouveau code de "gravity wave drag" sgoflx3.ftn est une
copie du code linearise lin_sgoflx1.ftn.
@
text
@      subroutine initcl2
      write(6,'(A)') "SUBROUTINE INITCL2 IS OBSOLETE"
      call qqexit(1)
      return
      end
@


3.8
log
@description_r3.8
@
text
@d1 5
a5 190
!copyright (C) 2001  MSC-RPN COMM  %%%RPNPHY%%%
***S/P  INITCL2
*
      SUBROUTINE INITCL2(D2P,BA1,AA1,A1MAX,A1MIN,WKI,WM,A2P,C1,C2,
     +                  EPSTFN, QS, WP, Z0, TS, WS, TM, MG, al,
     +                  gl, sd, cs, ks, sm, vg, lat,
     +                  cst, csn, csg, kst, ksn, ksg,
     +                  QA, PS, TYPE, TAU, KOUNT, N)
#include "impnone.cdk"
      INTEGER KOUNT,N
      REAL D2P(N),BA1(N),AA1(N),A1MAX(N),A1MIN(N),WKI(N),WM(N),A2P(N)
      REAL C1(N),C2(N),EPSTFN(N),QS(N),WP(N),Z0(N),TS(N),WS(N)
      REAL TM(N),MG(N),QA(N),PS(N),TYPE(N),TAU
      real al(n),gl(n),sd(n),cs(n),ks(n),sm(n),vg(n),lat(n)
      real cst, csn, csg, kst, ksn, ksg
      REAL WSWK,QSAT
*
*Author
*          J. Cote (RPN 1984)
*
*Revision
* 001      J. Cote RPN(Nov 1984)SEF version documentation
* 002      M. Lepine  -  RFE model code revision project (Feb 87)
* 003      J. Mailhot (Mar 1987) Reduce surface vapour flux
*          Adapted to the code revision by MJ L'Heureux (Sept87)
* 004      J. Mailhot RPN(Oct 1985) Add numerical constants
*             revised code Adaptation G.Pellerin (Oct87)
* 005      Y. Delage  Redefinition of Z0 (May89)
* 006      B. Bilodeau  (April 90)
*          Set QS to zero if the model is run without humidity
* 007      Y. Delage  (August 1990)
* 008      N. Brunet (May 1991)
*           New version of thermodynamic functions and file of
*           constants
* 009      B. Bilodeau (Aug1991) Adaptation to UNIX
* 010      C. Girard (Nov1992)
*          Modification to the definition of the surface humidity
* 011      B. Bilodeau (May 1994) - New physics interface
* 012      N. Brunet (mai 1995) - new surface processes
* 013      B. Bilodeau (June 1997) - No maximum value on Z0
*                                    (max was 20 metres)
*
*Object
*          to initialize the boundary layer fields
*
*Arguments
*
*          - Input/Output -
* D2P      timestep*(1/RHO(water)*D2)
* BA1      timestep*(1/RHO(water)*D1)*BA/(critical value of which the
*          precipitation flows)
* AA1      timestep*(1/RHO(water)*D1)*(A1MAX-BA*WX)
* A1MAX    timestep*(1/RHO(water)*D1)*A1MAX
* A1MIN    timestep*(1/RHO(water)*D1)*A1MIN
* WKI      1/(critical value in which the surface acts as if it was
*          saturated)
* WM       critical value of which the precipitation flows
* A2P      timestep*A2/(24 hours)
* C1       2*timestep*PI/(24 hours)
* C2       2*timestep*SQRT(PI)/(specific heat of ground*SQRT(ground
*          thermal diffusion coefficient*(24 hours)))
* EPSTFN   radiation emissivity of the surface (.94 * Stephan-
*          Boltzman constant)
* QS       specific humidity at the surface
* WP       deep soil moisture
*
*          - Input/Output -
* Z0       log of surface roughness length as input
*          roughness length as output
* TS       surface temperature
* WS       surface soil moisture
*
*          - Input -
* TM       sea surface temperature
* MG       land-sea mask
* AL       surface albedo
* GL       oceanic ice cover
* SD       snow depth
* CS       heat capacity of soil - computed in stfrst
* KS       heat diffusivity of soil - computed in stfrst
* SM       stomatal resistance - computed in stfrst
* VG       vegetation types
* LAT      latitude in radians
* CST      basic value of heat capacity of soil   (see comdeck options)
* CSN      basic value of heat capacity of snow     "     "       "
* CSG      basic value of heat capacity of ice      "     "       "
* KST      basic value of heat diffusivity of soil  "     "       "
* KSN      basic value of heat diffusivity of snow  "     "       "
* KSG      basic value of heat diffusivity of ice   "     "       "
* QA       specific humidity at the anemometer level
* PS       surface pressure in millibars
* TYPE     work space (N)
* TAU      timestep
* KOUNT    number of timesteps
* N        horizontal dimension
*
*MODULES
*
#include "options.cdk"
*
      EXTERNAL STFRST3
#if defined (EXPORT)
      REAL CVMGZ
      EXTERNAL CVMGZ
#endif
*
**
*
      INTEGER J
      REAL FRACT
#if defined (CVMG)
#include "cvmg.cdk"
#endif
*
#include "consphy.cdk"
#include "dintern.cdk"
#include "fintern.cdk"
*                                           CALCULER 1/ZA ET LN ZA/Z0
*
      FRACT=1.0
*
*     Z0 MAXIMUM : 20 METRES
C     DO 1 J=1,N
C        Z0(J)=MIN(Z0(J),20.)
C 1   CONTINUE
*
*     CALCULER TYPE AVEC MASQUE GLOBAL (MG)
*     POUR LE MOMENT ON UTILISE SIMPLEMENT TYPE=MASQUE
*     SUR L'OCEAN, REMPLACER TS PAR TM
*
      DO 2 J=1,N
         TYPE(J)=FLOAT(IFIX(0.1+MG(J)))
*
*        IF(TYPE(J).EQ.0.0) TS(J)=TM(J)
*
         TS(J) = CVMGZ ( TM(J) , TS(J) , TYPE(J) )
  2   CONTINUE
*
      CALL STFRST3(D2P,BA1,AA1,A1MAX,A1MIN,WKI,WM,A2P,C1,C2,EPSTFN,TYPE,
     +             gl, sd, cs, ks, sm, vg, al, cst, csn, csg, kst,
     X             ksn, ksg, lat, date, stomate, typsol, TAU, N)
*
*  EN CAS DE REPRISE LE TRAVAIL EST FINI
*
      IF(KOUNT .GT. 1) RETURN
*
*                                           CALCUL DE QS SELON FCREST
*
      IF(SATUCO)THEN
      DO 3 J=1,N
*
         QSAT = FOQST(TS(J),PS(J))
*
         WS(J) = CVMGZ ( FRACT , WS(J) , TYPE(J) )/WKI(J)
         WS(J) = MAX( MIN( WS(J), WM(J) ), 0.015 )
*
         WSWK = MIN ( WS(J)*WKI(J) , 1.0 )
         WSWK = MAX ( 0.5*(1.-COS(PI*WSWK)) , .05 )
*
         QS(J)=MIN( WSWK*(QSAT-QA(J))+QA(J) , QSAT )
*
    3    WP(J)=WS(J)
      ELSE
       DO 13 J=1,N
*
         QSAT = FOQSA(TS(J),PS(J))
*
         WS(J) = CVMGZ ( FRACT , WS(J) , TYPE(J) )/WKI(J)
         WS(J)=MAX( MIN( WS(J), WM(J) ), 0.015 )
*
         WSWK = MIN ( WS(J)*WKI(J) , 1.0 )
         WSWK = MAX ( 0.5*(1.-COS(PI*WSWK)) , .05 )
*
         QS(J)=MIN( WSWK*(QSAT-QA(J))+QA(J) , QSAT )
*
   13    WP(J)=WS(J)
      END IF
*
*
*     METTRE QS A ZERO SI LE MODELE EST SEC.
      IF( .NOT. (WET.AND.EVAP) ) THEN
*
         DO 4 J=1,N
            QS(J) = 0.0
4        CONTINUE
*
      ENDIF
*
      RETURN
      END
@
